<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sxxt.dao.TrainningTeacherDao">
	<select id="findById" resultType="TrainningTeacher"
		parameterType="int">
		SELECT
		training_teacher.id,
		training_teacher.`name`,
		training_teacher.`code`,
		training_teacher.position_name,
		training_teacher.`password`,
		training_teacher.role_id `role.id`,
		training_teacher.company_id `company.id`,
		training_teacher.state,
		company_info.`name` `company.name`
		FROM
		training_teacher
		INNER JOIN
		company_info ON training_teacher.company_id = company_info.id
		WHERE
		training_teacher.state =1 AND
		training_teacher.id = #{id} AND
		company_info.state =1
	</select>
	<select id="findByCode" resultType="TrainningTeacher"
		parameterType="String">
		<bind name="pattern" value="_parameter" />
		SELECT
		training_teacher.id,
		training_teacher.`name`,
		training_teacher.`code`,
		training_teacher.position_name,
		training_teacher.`password`,
		training_teacher.role_id `role.id`,
		training_teacher.company_id `company.id`,
		training_teacher.state,
		company_info.`name` `company.name`
		FROM
		training_teacher
		INNER JOIN
		company_info ON training_teacher.company_id = company_info.id
		WHERE
		training_teacher.state =1 AND
		training_teacher.code LIKE #{pattern} AND
		company_info.state =1
	</select>
	<select id="findAll" resultType="TrainningTeacher"
		parameterType="int">
		SELECT
		training_teacher.id,
		training_teacher.`name`,
		training_teacher.`code`,
		training_teacher.position_name,
		training_teacher.`password`,
		training_teacher.role_id `role.id`,
		training_teacher.company_id
		`company.id`,
		training_teacher.state,
		company_info.`name` `company.name`
		FROM
		training_teacher
		INNER JOIN
		company_info ON
		training_teacher.company_id = company_info.id
		WHERE
		training_teacher.state =1
		AND
		company_info.state =1
	</select>


	<select id="findByCompanyId" resultType="TrainningTeacher"
		parameterType="int">
		SELECT
		training_teacher.id,
		training_teacher.`name`,
		training_teacher.`code`,
		training_teacher.position_name,
		training_teacher.`password`,
		training_teacher.role_id `role.id`,
		training_teacher.company_id
		`company.id`,
		training_teacher.state,
		company_info.`name` `company.name`
		FROM
		training_teacher
		INNER JOIN
		company_info ON
		training_teacher.company_id = company_info.id
		WHERE
		training_teacher.company_id = #{id}
		AND
		training_teacher.state =1
		AND
		company_info.state =1
	</select>


	<insert id="addTrainningTeacher" parameterType="TrainningTeacher"
		flushCache="true" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO
		`sxxt`.`training_teacher` (
		`name`,
		`code`,
		`position_name`,
		`password`,
		`role_id`,
		`company_id`,
		`state`
		)
		VALUES
		(
		#{name},
		#{code},
		#{positionName},
		#{password},
		3,
		#{company.id},
		1
		);
	</insert>
	<update id="editTrainningTeacher" parameterType="TrainningTeacher"
		flushCache="true">
		UPDATE `sxxt`.`training_teacher`
		SET
		`name` = #{name},
		`code`
		= #{code},
		`position_name` = #{positionName},
		`password` = #{password},
		`company_id` = #{company.id}
		WHERE
		(`id` =
		#{id});
	</update>

	<update id="delTrainningTeacher" parameterType="int" flushCache="true">
		UPDATE `sxxt`.`training_teacher`
		<set>
			`state` = 0,
		</set>
		WHERE (`id` = #{id});
	</update>
</mapper>